
#Find all S3 buckets with server side encryption disabled 
for bucket in $(aws s3 ls | cut -d " " -f 3); do if [[ $(aws s3api get-bucket-encryption --bucket $bucket 2>&1| grep -io error | wc -c) -gt 0 ]]; then forge_S3_SS3_Disabled $bucket; echo -e  $bucket '\t\t\t[Not encrypted]' >> bucket_store; else echo -e $bucket '\t\t\t[Encrypted]' >>bucket_store; fi; done

#Find all S3 access logging status
for bucket in $(aws s3 ls | cut -d " " -f 3); do if [[ $(aws s3api get-bucket-logging --bucket $bucket 2>&1 | wc -c) -eq 0 ]]; then forge_S3_Access_Logging_Disabled $bucket echo -e $bucket '\t\t\t[Logging disabled]' >> bucket_logging_status; else echo -e $bucket '\t\t\t[Logging enabled]' >> bucket_logging_status; fi; done  

#Find all S3 buckets flagged as public
for bucket in $(aws s3 ls | cut -d " " -f 3); do if [[ $(aws s3api get-bucket-policy-status --bucket $bucket | grep "IsPublic" | cut -d ":" -f 2 | tr -d " ") == "false" ]]; then echo -e $bucket '\t\t\t[Public Bucket]' >> public_s3_Check; else echo -e $bucket '\t\t\t[Not Public Bucket]' >> public_s3_Check;fi;done;

#Find all SQS queues with server side encryption disabled
for queues in $(aws sqs list-queues --region $region | grep "https://" | tr -d '", '); do for attributes in $(aws sqs get-queue-attributes --queue-url $queues --attribute-names KmsMasterKeyId --region $region | grep "KmsMasterKeyId" | wc -c); do if [[ $attributes -eq 0 ]]; then echo -e $queues '\t\t\t[Not Encrypted]' >> sqs_queue_Enumeration; else echo -e $queues '\t\t\t[Encrypted]' >> sqs_queue_Enumeration;fi; done; done;

#Find all SNS topics with server side encryption disabled
for topics in $(aws sns list-topics --region $region | grep -A 0 "TopicArn" | cut -d '"' -f 4); do for attributes in $(aws sns get-topic-attributes --topic $topics --region $region | grep "KmsMasterKeyId" | tr -d " " | wc -c); do if [[ $attributes -eq 0 ]]; then echo -e $topics '\t\t\t[Encryption Disabled]' >> sns_encryption_check; else echo -e $topics '\t\t\t[Encryption enabled]' >> sns_encryption_check;fi; done; done; 


#Check for CloudTrail log validation
for trails in $(aws cloudtrail list-trails | grep -i 'name' | cut -d '"' -f 4); do for validation_checks in $(aws cloudtrail get-trail --name $trails --region $region | grep '"LogFileValidationEnabled":' | cut -d '"' -f 3 | tr -d ":, ");do if [[ "$validation_checks" == "true" ]]; then echo -e $trails '\t\t\t[Logging Validation Enabled]' >> cloudtrail_validation; else echo -e $trails '\t\t\t[Logging Validation Disabled]' >> cloudtrail_validation;fi; done; done 

#Extracting the most recent CloudWatch log streams
for groups in $(aws logs describe-log-groups | grep -o '"logGroupName":.*[^\\]",' | cut -d '"' -f 4);do for streams in $(aws logs describe-log-streams --log-group-name $groups --descending --max-items 10 | grep -o '"logStreamName":.*[^\\]",' |  cut -d '"' -f 4 | sed 's/\$/\\$/g'); do echo -e "\n"; for events in $(aws logs get-log-events --log-group-name $groups --log-stream-name $streams --descending --max-items 10); do echo -n $events >> logs; done; done;done;

#Find EBS volumes with server side encryption disabled
for volumes in $(aws ec2 describe-volumes --region $region | grep -i "encrypted" | cut -d '"' -f 3 | tr -d ':, ' ); do if [[ "$volumes" = "true" ]]; then echo $volumes '\t\t\t[Not Encrypted]' >> ebs_encryption_check; else echo $volumnes '\t\t\t[Encrypted]' >> ebs_encryption_check;fi;done;


TODO:
Add lambda env variables, sse, add NACL checks, more logging
